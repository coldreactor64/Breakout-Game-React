{"version":3,"sources":["utils.js","constants.js","Game/gameComponents.js","Engine/vector.js","Engine/levels.js","Engine/core.js","Game/state.js","Game/game.js","App.js","serviceWorker.js","index.js"],"names":["registerListener","eventName","handler","window","addEventListener","removeEventListener","getRandomFrom","args","Math","floor","random","length","colors","GameBall","x","y","radius","className","cx","cy","r","Block","width","height","density","fill","rx","LevelLabel","level","unit","LivesCounter","lives","containerWidth","Array","keys","map","i","key","Paddle","Vector","this","number","hypot","scaleBy","other","amt","dotProduct","normal","subtract","projectOn","degrees","radians","PI","toRadians","cos","sin","atan2","crossProduct","generateLevels","columns","rows","levelArray","arr","blocksStartVertical","MAX_HEIGHT","blocksStartHorizontal","row","j","position","generateBlocks","reduce","acc","levelConfiguration","paddleWidth","speed","blocks","MOVEMENT","LEFT","RIGHT","UP","DOWN","LEFT_UP","add","normalize","RIGHT_UP","getInitialPaddleAndBallState","gameWidth","gameHeight","paddleYPosition","paddle","ball","center","direction","getInitialLevelState","size","getProjection","containerSize","gameSize","widthRatio","heightRatio","screenUnit","min","projectDistance","distance","projectDistanceReverse","projectVector","vector","boundaryCheck","objectSide","objectSide2","boundarySide","boundarySide2","updateGameState","state","movement","timespan","movementDirection","returnNewPosition","updatePaddlePosition","oldMousePosition","newMousePosition","mouseX","updatePaddlePositionMouse","oldDirection","newBallCenter","ballBottom","withNewBallProps","props","withNewBallDirection","minAngle","angle","angleBetween","maxAngle","rotate","adjustVector","distortionLevel","getComponent","distortion","distortVector","reflect","ballLeft","ballRight","ballTop","paddleLeft","paddleRight","paddleTop","abs","array","element","block","find","newBlock","filter","e","oldElement","newElement","updateElement","blockTop","blockBottom","blockLeft","getNewBallNormal","ACTION","MOVEMENT_KEYS","reducer","type","payload","console","log","containerSizeChange","onKeyUp","onKeyDown","mouseMove","tick","game","includes","mousePosition","newState","undefined","stopTime","time","Date","now","newGame","localStorage","setItem","GamePage","gameContainer","useRef","useState","setSize","setMouseX","useEffect","onResize","current","getBoundingClientRect","unregisterResizeListener","unregisterMouseListener","clientX","onMouseOver","ref","variable2","getInitialState","inState","getItem","parseInt","getSavedLevel","Scene","useReducer","dispatch","act","timerId","setInterval","unregisterKeydown","which","unregisterKeyup","clearInterval","viewWidth","viewHeight","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.60dbb24f.chunk.js","sourcesContent":["export const registerListener = (eventName, handler) => {\r\n    window.addEventListener(eventName, handler);\r\n    return () => window.removeEventListener(eventName, handler);\r\n}\r\n\r\nexport const flatten = arrays => arrays.reduce((acc, row)=>[...acc, ...row], []);\r\nexport const getRange = length => [...Array(length).keys()];\r\nexport const toDegrees = radians => (radians * 180) / Math.PI\r\nexport const toRadians = degrees => (degrees * Math.PI) / 180\r\nexport const withoutElement = (array, element) => array.filter(e => e !== element)\r\nexport const updateElement = (array, oldElement, newElement) => array.map(e => e === oldElement ? newElement : e)\r\nexport const getRandomFrom = (...args) => args[Math.floor(Math.random()* args.length)]\r\n","\r\nexport const colors = [\"#4ABFF0\",  \"#F23737\",  \"#835995\", \"#9FCE31\", \"#FFCC00\"];\r\nexport const PADDLE_AREA = 1 / 3\r\nexport const BLOCK_HEIGHT = 1 / 3\r\nexport const PADDLE_HEIGHT = BLOCK_HEIGHT\r\nexport const BALL_RADIUS = 1 / 5\r\nexport const DISTANCE_IN_MS = 0.005\r\nexport const UPDATE_EVERY = 1000 / 144\r\nexport const MAX_BLOCK_DENSITY = 3;\r\nexport const MAX_WIDTH = 9;\r\nexport const MAX_HEIGHT = 11;\r\nexport const MOVEMENT = {\r\n    LEFT: 'LEFT',\r\n    RIGHT: 'RIGHT'\r\n}\r\n","import React from 'react';\r\nimport {colors} from '../constants'\r\nimport {getRange} from '../utils'\r\nexport const GameBall = ({x,y, radius}) => (\r\n    <circle className = 'ball' cx={x} cy={y} r = {radius}/>\r\n)\r\n\r\nexport const Block =({ x, y, width, height, density }) => (\r\n    <rect className='block' fill={colors[density]} x={x} y={y}  rx = {width / 16} width={width - 5} height={height-3} />\r\n);\r\n\r\nexport const LevelLabel = ({level, unit}) => (\r\n    <text x={unit} y = {unit * 2} className = 'level'>\r\n        LEVEL: {level}\r\n    </text>\r\n)\r\n\r\nexport const LivesCounter = ({lives, containerWidth, unit}) => {\r\n    const width = unit * 2;\r\n    return getRange(lives).map(i => (\r\n        <rect\r\n        className = 'life'\r\n        rx = {unit / 4}\r\n        height = {unit}\r\n        width = {width}\r\n        y = {unit}\r\n        x = {containerWidth - unit - width * (i + 1) - (unit /2) * i}\r\n        key = {i}\r\n        />\r\n    ))\r\n}\r\n\r\nexport const Paddle = ({ x, y, width, height }) => (\r\n    <rect className='paddle' x={x} y={y} width={width} height={height}  rx = {width / 16} />\r\n  )","import { toDegrees, toRadians } from '../utils'\r\n\r\n\r\nexport default class Vector {\r\n    constructor(x, y) {\r\n      this.x = x\r\n      this.y = y\r\n    }\r\n  \r\n    scaleBy(number) {\r\n      return new Vector(this.x * number, this.y * number);\r\n    }\r\n  \r\n    length() {\r\n      return Math.hypot(this.x, this.y)\r\n    }\r\n  \r\n    add({ x, y }) {\r\n      return new Vector(this.x + x, this.y + y)\r\n    }\r\n  \r\n    normalize() {\r\n      return this.scaleBy(1 / this.length())\r\n    }\r\n    \r\n    subtract({ x, y }) {\r\n      return new Vector(this.x - x, this.y - y)\r\n    }\r\n  \r\n    dotProduct({ x, y }) {\r\n      return this.x * x + this.y * y\r\n    }\r\n  \r\n    projectOn(other) {\r\n      const amt = this.dotProduct(other) / other.length()\r\n      return new Vector(amt * other.x, amt * other.y)\r\n    }\r\n  \r\n    reflect(normal) {\r\n      return this.subtract(this.projectOn(normal).scaleBy(2))\r\n    }\r\n  \r\n    rotate(degrees) {\r\n      const radians = toRadians(degrees)\r\n      const cos = Math.cos(radians)\r\n      const sin = Math.sin(radians)\r\n  \r\n      return new Vector(\r\n        this.x * cos - this.y * sin,\r\n        this.x * sin + this.y * cos\r\n      )\r\n    }\r\n  \r\n    crossProduct({ x, y }) {\r\n      return this.x * y - x * this.y\r\n    }\r\n  \r\n    angleBetween(other) {\r\n      return toDegrees(\r\n        Math.atan2(this.crossProduct(other), this.dotProduct(other))\r\n      )\r\n    }\r\n  }","import {MAX_WIDTH, MAX_HEIGHT} from '../constants'\r\nimport { flatten } from '../utils'\r\nimport Vector from './vector'\r\n//TODO: generate Block other position parameters based on position\r\n\r\nconst generateBlocks = (arr, height, width) => {\r\n    let createDensity = () => Math.floor(Math.random() * 3);\r\n    const blocksStartVertical =  ((MAX_HEIGHT - height)/ 2) + MAX_HEIGHT * (1/8)\r\n    const blocksStartHorizontal = ((MAX_WIDTH - width) / 2);\r\n    const rowsOfBlocks = arr.map((row, i) =>\r\n        row.map((density, j) => ({\r\n            density: createDensity(),\r\n            position: new Vector(j + blocksStartHorizontal, blocksStartVertical + (i * 1 / 3)),\r\n            width: 1,\r\n            height: 1/4\r\n        })\r\n    ))\r\n    return rowsOfBlocks;\r\n}\r\n/**\r\n * @function generateLevels - generate levels\r\n * @param {*} columns - width of the game field up to 9\r\n * @param {*} rows - rows of the game field up to max of 11;\r\n */\r\nconst generateLevels = (columns, rows) => {\r\n    let levelArray = [...Array(rows)];\r\n    levelArray = levelArray.map(x => {\r\n        return [...Array(columns)]\r\n    });\r\n    levelArray = generateBlocks(levelArray, rows, columns);\r\n    return flatten(levelArray);\r\n}\r\n\r\n\r\nexport const levelConfiguration = [\r\n    {\r\n        lives: 5,\r\n        paddleWidth: 2.5,\r\n        speed: 1,\r\n        blocks: generateLevels(3, 3),\r\n        width: 9,\r\n        height: 11,\r\n    },\r\n    {\r\n        lives: 4,\r\n        paddleWidth: 3,\r\n        speed: 1.4,\r\n        blocks: generateLevels(3, 4),\r\n        width: 9,\r\n        height: 11,\r\n    },\r\n    {\r\n        lives: 3,\r\n        paddleWidth: 2.5,\r\n        speed: 1.8,\r\n        blocks: generateLevels(3, 5),\r\n        width: 9,\r\n        height: 11,\r\n    },\r\n    {\r\n        lives: 3,\r\n        paddleWidth: 2,\r\n        speed: 1.4,\r\n        blocks: generateLevels(3, 6),\r\n        width: 9,\r\n        height: 11,\r\n    },\r\n];","import Vector from \"./vector\";\r\nimport {getRandomFrom, withoutElement, updateElement} from '../utils'\r\nimport {MAX_HEIGHT, MAX_WIDTH} from '../constants'\r\n//Game core puts size and positions in relative to game size which then gets projected to the actual size\r\n\r\n\r\nconst DISTANCE_IN_MS = 0.005\r\n\r\nexport const MOVEMENT = {\r\n  LEFT: 'LEFT',\r\n  RIGHT: 'RIGHT'\r\n}\r\n\r\nconst LEFT = new Vector(-1, 0)\r\nconst RIGHT = new Vector(1, 0)\r\nconst UP = new Vector(0, -1)\r\nconst DOWN = new Vector(0, 1)\r\n\r\nconst LEFT_UP = LEFT.add(UP).normalize()\r\nconst RIGHT_UP = RIGHT.add(UP).normalize()\r\n\r\n/**\r\n * @function getInitialPaddleAndBallState - Returns the initial state of Paddle and Ball\r\n * @param {Number} gameWidth Game nonprojected width\r\n * @param {Number} gameHeight Game nonprojected Height\r\n * @param {Number} paddleWidth Width of the paddle per level.\r\n * @returns {JSON} Returns paddle and ball state\r\n */\r\nexport const getInitialPaddleAndBallState = (gameWidth, gameHeight, paddleWidth) => {\r\n    //TODO: turn the paddle area and ball radius into constants\r\n    //Paddle Y position is the height of the gamefield minus 1/3, making the paddle be the lower 1/3 of the game field\r\n    const paddleYPosition = gameHeight - (1 / 3) - .06; //Paddle Y position is 1/3 of the height\r\n    const paddle = {\r\n        position: new Vector((gameWidth - paddleWidth) / 2, paddleYPosition),\r\n        width: paddleWidth,\r\n        height: 1/3\r\n    }\r\n    const ball = {\r\n        center: new Vector(gameHeight / 2, paddleYPosition - 1 / 5 * 2),\r\n        radius: 1 / 5,\r\n        direction: getRandomFrom(LEFT_UP, RIGHT_UP)\r\n      }\r\n\r\n    return {\r\n        paddle,\r\n        ball\r\n    }\r\n}\r\n\r\n\r\nexport const getInitialLevelState = ({lives, paddleWidth, speed, blocks, width, height}) => \r\n{\r\n    return {\r\n        size: {\r\n            width,\r\n            height\r\n        },\r\n        blocks,\r\n        speed,\r\n        lives,\r\n        ...getInitialPaddleAndBallState(width, height, paddleWidth)\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @function getProjection - gets the scaling size for the screen and container size\r\n * @param {*} containerSize - Size of the container {width: number, height: number}\r\n * @param {*} gameSize - Game Size to be projected on the container {width: number, height: number}\r\n * @returns {Function} - Returns two functions projectDistance, and projectVector\r\n */\r\n\r\nexport const getProjection = (containerSize, gameSize) => {\r\n    //Find the ratios between width and height compare to find the smallest\r\n    const widthRatio = containerSize.width / gameSize.width;\r\n    const heightRatio = containerSize.height / gameSize.height;\r\n    const screenUnit = Math.min(heightRatio, widthRatio);\r\n    return {\r\n        /**\r\n         * @function projectDistance - projects the distance onto the current screen size\r\n         * @param {Number} distance - distance to project\r\n         * @returns {Number} returns the position on screen\r\n         */\r\n\r\n        projectDistance: distance => distance * screenUnit,\r\n        projectDistanceReverse : distance => distance / screenUnit,\r\n        /**\r\n         * @function projectVector - projects the distance onto the current screen size\r\n         * @param {Vector} vector - vector to project to screen size\r\n         * @returns {Vector} returns scaled vector\r\n         */\r\n        projectVector: vector => vector.scaleBy(screenUnit)\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @function distortVector - adds randomness to a vector\r\n * @param {*} vector -input vector to distort\r\n * @param {*} distortionLevel - Amount to distort\r\n */\r\n\r\nconst distortVector = (vector, distortionLevel = 0.3) => {\r\n    //get random components for the vector based on distortion level and create a new vector\r\n    const getComponent = () => Math.random() * distortionLevel - distortionLevel / 2\r\n    const distortion = new Vector(getComponent(), getComponent());\r\n    //add it to the vector and normalize it.\r\n    return vector.add(distortion).normalize()\r\n}\r\n\r\n/**\r\n * @function updatePaddlePosition - gets the new position of the paddle\r\n * @param {*} paddle - contains {positon: Vector, width, height} as paddle paramaters\r\n * @param {*} size - size of the play area in blocks\r\n * @param {*} distance - distance that it can move a tick\r\n * @param {*} movement - Are we moving?\r\n * @returns {JSON} - Returns paddle with update position\r\n */\r\nconst updatePaddlePosition = (paddle, size, distance, movement) => {\r\n    //If we have no movement, return paddle\r\n    if(!movement) return paddle;\r\n    const movementDirection =  movement === MOVEMENT.LEFT ? LEFT : RIGHT\r\n    //calculate new position\r\n    const { x } = paddle.position.add(movementDirection.scaleBy(distance)) \r\n    \r\n    const returnNewPosition = (x) => ({\r\n        ...paddle,\r\n        position: new Vector(x, paddle.position.y)\r\n    })\r\n    \r\n    //Check if it falls off any of the edges\r\n    if (x < 0) {\r\n        return returnNewPosition(0);\r\n    }\r\n    if (x + paddle.width > size.width){\r\n        return returnNewPosition(size.width - paddle.width);\r\n    }\r\n\r\n    return returnNewPosition(x);\r\n}\r\n\r\n\r\nconst updatePaddlePositionMouse = (paddle, gameSize, containerSize, oldMousePosition, newMousePosition, projectDistanceReverse) => {\r\n  if(oldMousePosition === newMousePosition) return paddle;\r\n  const  x  = projectDistanceReverse(newMousePosition.mouseX);\r\n  const returnNewPosition = (newMousePosition) =>({\r\n        ...paddle,\r\n        position: new Vector(x, paddle.position.y)\r\n    })\r\n\r\n    //Check if it falls off any of the edges\r\n  if (x < 0) {\r\n      return returnNewPosition(0);\r\n  }\r\n  if (x + paddle.width > gameSize.width){\r\n      return returnNewPosition(gameSize.width - paddle.width);\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n/**\r\n * @function boundaryCheck - checks if we are inside another objects boundaries\r\n * @param {*} objectSide -Object we are checking side 1\r\n * @param {*} objectSide2 -object checking side 2\r\n * @param {*} boundarySide - boundary object side 1\r\n * @param {*} boundarySide2 - boundary object side 2\r\n */\r\nconst boundaryCheck = (objectSide, objectSide2, boundarySide, boundarySide2) => (\r\n    (objectSide >= boundarySide && objectSide <= boundarySide2) ||\r\n    (objectSide2 >= boundarySide && objectSide2 <= boundarySide2)  \r\n)\r\n\r\n/**\r\n * @function adjustVector - Adjusts ball so it never goes below certain degrees +90 and -90 degrees\r\n */\r\nconst adjustVector = (normal, vector, minAngle = 15) => {\r\n    const angle = normal.angleBetween(vector)\r\n    const maxAngle = 90 - minAngle\r\n    if (angle < 0) {\r\n      if (angle > -minAngle) {\r\n        return normal.rotate(-minAngle)\r\n      }\r\n      if (angle < -maxAngle) {\r\n        return normal.rotate(-maxAngle)\r\n      }\r\n    } else {\r\n      if (angle < minAngle) {\r\n        return normal.rotate(minAngle)\r\n      }\r\n      if (angle > maxAngle) {\r\n        return normal.rotate(maxAngle)\r\n      }\r\n    }\r\n    return vector\r\n}\r\n/**\r\n * @function updateGameState - update the game state\r\n * @param {*} state - current game state\r\n * @param {*} movement - is the paddle moving\r\n * @param {*} timespan - time between last update and now\r\n * @returns {*} - new state of the game\r\n */\r\n\r\n\r\nexport const updateGameState = (state, movement, timespan) => {\r\n    //Step 1: Update Position of the paddle from current state\r\n    const { size, speed, lives, containerSize } = state\r\n    const distance = timespan * DISTANCE_IN_MS * speed\r\n    const paddle = updatePaddlePosition(state.paddle, size, distance, movement)\r\n\r\n    \r\n    const mousePaddlePosition = updatePaddlePositionMouse(state.paddle, size, containerSize, state.oldMousePosition, state.newMousePosition, state.projectDistanceReverse)\r\n    //console.log(mousePaddlePosition.position.x);\r\n\r\n    const { radius } = state.ball\r\n    const oldDirection = state.ball.direction\r\n    const newBallCenter = state.ball.center.add(oldDirection.scaleBy(distance))\r\n    const ballBottom = newBallCenter.y + radius\r\n\r\n    if (ballBottom > size.height) {\r\n      return {\r\n        ...state,\r\n        ...getInitialPaddleAndBallState(size.width, size.height, paddle.width),\r\n        lives: lives - 1\r\n      }\r\n    }\r\n    \r\n    const withNewBallProps = props => ({\r\n      ...state,\r\n      paddle,\r\n      ball: {\r\n        ...state.ball,\r\n        ...props\r\n      }\r\n    })\r\n  \r\n    const withNewBallDirection = normal => {\r\n      const distorted = distortVector(oldDirection.reflect(normal))\r\n      const direction = adjustVector(normal, distorted)\r\n      return withNewBallProps({ direction })\r\n    }\r\n    const ballLeft = newBallCenter.x - radius\r\n    const ballRight = newBallCenter.x + radius\r\n    const ballTop = newBallCenter.y - radius\r\n    const paddleLeft = paddle.position.x\r\n    const paddleRight = paddleLeft+ paddle.width\r\n    const paddleTop = paddle.position.y\r\n  \r\n    const ballGoingDown = Math.abs(UP.angleBetween(oldDirection)) > 90\r\n    const hitPaddle = ballGoingDown && ballBottom >= paddleTop && ballRight >= paddleLeft && ballLeft <= paddleRight\r\n    if (hitPaddle) return withNewBallDirection(UP)\r\n    if (ballTop <= 0) return withNewBallDirection(DOWN)\r\n    if (ballLeft <= 0) return withNewBallDirection(RIGHT)\r\n    if (ballRight >= size.width) return withNewBallDirection(LEFT)\r\n  \r\n    const block = state.blocks.find(({ position, width, height }) => (\r\n      boundaryCheck(ballTop, ballBottom, position.y, position.y + height) &&\r\n      boundaryCheck(ballLeft, ballRight, position.x, position.x + width) \r\n    ))\r\n\r\n\r\n    if (block) {\r\n      const density = block.density - 1\r\n      const newBlock = { ...block, density }\r\n      const blocks = density < 0 ? withoutElement(state.blocks, block) : updateElement(state.blocks, block, newBlock)\r\n      \r\n      const getNewBallNormal = () => {\r\n        const blockTop = block.position.y\r\n        const blockBottom = blockTop + block.height\r\n        const blockLeft = block.position.x\r\n        if (ballTop > blockTop - radius && ballBottom < blockBottom + radius) {\r\n          if (ballLeft < blockLeft) return LEFT\r\n          if (ballRight > blockLeft + block.width) return RIGHT\r\n        }\r\n        if (ballTop > blockTop) return DOWN\r\n        if (ballTop <= blockTop) return UP\r\n      }\r\n      return {\r\n        ...withNewBallDirection(getNewBallNormal()),\r\n        blocks\r\n      }\r\n    }\r\n    return withNewBallProps({ center: newBallCenter })\r\n  \r\n}","import { levelConfiguration } from '../Engine/levels'\r\nimport { MOVEMENT, updateGameState, getInitialLevelState, getProjection } from '../Engine/core'\r\n\r\n \r\nexport const ACTION = {\r\n    CONTAINER_SIZE_CHANGE: 'CONTAINER_SIZE_CHANGE',\r\n    KEY_DOWN: 'KEY_DOWN',\r\n    KEY_UP: 'KEY_UP',\r\n    MOUSE_MOVE: 'MOUSE_MOVE',\r\n    TICK: 'TICK'\r\n  }\r\n  \r\n /** Game Constants */\r\n  const MOVEMENT_KEYS = {\r\n    LEFT: [65, 37, \"ArrowLeft\"],\r\n    RIGHT: [68, 39, \"ArrowRight\"]\r\n  }\r\n\r\n  const STOP_KEY = 32\r\n\r\nexport const reducer = (state, { type, payload }) => {\r\n    switch(type) {\r\n        case ACTION.CONTAINER_SIZE_CHANGE:\r\n            console.log(payload);\r\n            return containerSizeChange(state, payload);\r\n        case ACTION.KEY_UP:\r\n            return onKeyUp(state, payload);\r\n        case ACTION.KEY_DOWN:\r\n            return onKeyDown(state, payload)\r\n        case ACTION.MOUSE_MOVE:\r\n            return mouseMove(state, payload);\r\n        case ACTION.TICK:\r\n            return tick(state);\r\n            \r\n        default:\r\n             return state;\r\n    }\r\n  }\r\n  \r\nconst containerSizeChange = (state, containerSize)=> ({\r\n    ...state,\r\n    containerSize,\r\n    ...getProjection(containerSize, state.game.size)\r\n  })\r\n\r\nconst onKeyDown = (state, key) => {\r\n    if (MOVEMENT_KEYS.LEFT.includes(key)) {\r\n        console.log(state);\r\n      return { ...state, movement: MOVEMENT.LEFT }\r\n    } else if (MOVEMENT_KEYS.RIGHT.includes(key)) {\r\n      return { ...state, movement: MOVEMENT.RIGHT }\r\n    }\r\n    return state\r\n  }\r\nconst mouseMove = (state, mousePosition) => {\r\n    return {\r\n        ...state,\r\n        oldMousePosition: state.newMousePosition,\r\n        newMousePosition: mousePosition\r\n    }\r\n  }\r\nconst onKeyUp = (state, key) => {\r\n    const newState = { ...state, movement: undefined }\r\n    if (key === STOP_KEY) {\r\n        console.log(\"stop key\")\r\n      if (state.stopTime) {\r\n        return { ...newState, stopTime: undefined, time: state.time + Date.now() - state.stopTime}\r\n      } else {\r\n        return { ...newState, stopTime: Date.now() }\r\n      }\r\n    }\r\n    return newState\r\n}\r\n\r\nconst tick = (state) => {\r\n\r\n    if (state.stopTime) return state;\r\n    const time = Date.now()\r\n    const newGame = updateGameState(\r\n    {\r\n    ...state.game,\r\n    ...state\r\n    }, state.movement, time - state.time)\r\n    const newState = { ...state, time }\r\n\r\n    if (newGame.lives < 1) {\r\n      return { ...newState, game: getInitialLevelState(levelConfiguration[state.level]) }\r\n\r\n    } else if (newGame.blocks.length < 1) {\r\n\r\n      const level = state.level === levelConfiguration.length ? state.level : state.level + 1\r\n      localStorage.setItem('level', level)\r\n      const game = getInitialLevelState(levelConfiguration[state.level])\r\n\r\n      return {\r\n        ...newState,\r\n        level,\r\n        game,\r\n        ...getProjection(state.containerSize, game.size)\r\n      }\r\n\r\n    }\r\n    return { ...newState, game: newGame }\r\n}\r\n\r\n","import React, { useRef, useEffect, useState, useReducer } from 'react'\r\nimport {registerListener} from '../utils'\r\nimport {GameBall, Block, LevelLabel, LivesCounter, Paddle} from './gameComponents'\r\nimport { levelConfiguration } from '../Engine/levels'\r\nimport { getInitialLevelState, getProjection } from '../Engine/core'\r\nimport {reducer, ACTION} from './state'\r\nimport {UPDATE_EVERY} from '../constants'\r\n\r\n\r\nexport const GamePage = () => {\r\n    const gameContainer = useRef();\r\n    const [size, setSize] = useState();\r\n    const [mouseX, setMouseX] = useState();\r\n    useEffect(() => {\r\n        const onResize = ()=>{\r\n            //On resize get the current size ofthe screen and set it\r\n            const {width, height} = gameContainer.current.getBoundingClientRect(); \r\n            setSize({width, height})\r\n        }\r\n        const unregisterResizeListener = registerListener('resize', onResize);\r\n\r\n        const onMouseOver = (e) => {\r\n          setMouseX(e.clientX);\r\n        }\r\n        const unregisterMouseListener = registerListener('mousemove',(e)=> onMouseOver(e));\r\n        onResize();\r\n\r\n        return {unregisterResizeListener, unregisterMouseListener}; //unregister the listener when not rendered anymore\r\n    }, [])\r\n\r\n\r\n    return (\r\n        <div className = 'page'>\r\n            <div className = 'scene-container' ref = {gameContainer}>\r\n                {size && <Scene width = {size.width} height = {size.height} mouseX ={mouseX} variable2= {3} />}\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n    // {size && makes it not render at first, only when we have the size}\r\n}\r\n\r\n/**\r\n * @function getSavedLevel - gets the current level saved in local storage, or if none 0\r\n * @returns {Number} - returns the level saved in local storage\r\n */\r\nconst getSavedLevel = () => {\r\n    const inState = localStorage.getItem('level')\r\n    return inState ? parseInt(inState, 10) : 0\r\n  }\r\n  \r\n  /**\r\n   * @function getInitialState - gets the inital state of the level\r\n   * @param {*} containerSize \r\n   * @returns State \r\n   */\r\n  const getInitialState = containerSize => {\r\n    const level = getSavedLevel(); //Grabs level we're at\r\n    const game = getInitialLevelState(levelConfiguration[level]); //\r\n    const { projectDistance, projectVector, projectDistanceReverse } = getProjection(containerSize, game.size);\r\n    return {\r\n      level,\r\n      game,\r\n      containerSize,\r\n      projectDistance,\r\n      projectVector,\r\n      projectDistanceReverse,\r\n      oldMousePosition: 0,\r\n      newMousePosition: 0,\r\n      time: Date.now(),\r\n      stopTime: undefined,\r\n      movement: undefined\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * @param {props} containerSize - width and height props\r\n   */\r\n  const Scene = (containerSize) => {\r\n    //UseReducer to manage state like redux\r\n    const [state, dispatch] = useReducer(reducer, containerSize, getInitialState)\r\n    //act as an action dispatcher to the state, for useReducer\r\n    const act = (type, payload) => dispatch({ type, payload })\r\n\r\n    //Extract each component from the current State\r\n    const {\r\n      projectDistance,\r\n      projectVector,\r\n      projectDistanceReverse,\r\n      level,\r\n      game: {\r\n        blocks,\r\n        paddle,\r\n        ball,\r\n        size: {\r\n          width,\r\n          height\r\n        },\r\n        lives\r\n      }\r\n    } = state;\r\n    //when the size of the screen size changes, update container size.\r\n    useEffect(() => act(ACTION.CONTAINER_SIZE_CHANGE, {width: containerSize.width, height: containerSize.height}),\r\n    [containerSize.width, containerSize.height]);\r\n\r\n\r\n    useEffect(()=>act(ACTION.MOUSE_MOVE, {mouseX: containerSize.mouseX}),[containerSize.mouseX])\r\n    useEffect(() => {\r\n        const tick = () => act(ACTION.TICK, state)//Tick tock, update state\r\n        const timerId = setInterval(tick, UPDATE_EVERY)//update state based on constant\r\n        //see what pressed the keyboard, and what to do\r\n        const onKeyDown = ({ which }) => act(ACTION.KEY_DOWN, which);\r\n        const onKeyUp = ({ which }) => act(ACTION.KEY_UP, which)\r\n        const unregisterKeydown = registerListener('keydown', onKeyDown)\r\n        const unregisterKeyup = registerListener('keyup', onKeyUp)\r\n        //unregister when unmounting\r\n        return () => {\r\n        clearInterval(timerId)\r\n        unregisterKeydown()\r\n        unregisterKeyup()\r\n        }\r\n    }, [])\r\n  \r\n    //get current sizes for objects\r\n    const viewWidth = projectDistance(width);\r\n    const viewHeight = projectDistance(height);\r\n    const unit = projectDistance(ball.radius)\r\n    \r\n    return (\r\n      <svg width={viewWidth} height={viewHeight} className='scene'>\r\n        <LevelLabel unit={unit} level={level + 1} />\r\n        <LivesCounter\r\n          lives={lives}\r\n          containerWidth={viewWidth}\r\n          unit={unit}\r\n        />\r\n          {blocks.map(({ density, position, width, height }) => (\r\n            <Block\r\n              density={density}\r\n              key={`${position.x}-${position.y}`}\r\n              width={projectDistance(width)}\r\n              height={projectDistance(height)}\r\n              {...projectVector(position)}\r\n            />)\r\n          )}\r\n        <Paddle width={projectDistance(paddle.width)} height={projectDistance(paddle.height)} {...projectVector(paddle.position)} />\r\n        <GameBall {...projectVector(ball.center)} radius={unit} />\r\n      </svg>\r\n    )\r\n  }","import React from 'react';\nimport './App.css';\nimport {GamePage} from './Game/game'\nfunction App() {\n\n  return (\n      <GamePage/>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}